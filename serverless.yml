plugins:
  - serverless-appsync-plugin

service: cp-api # NOTE: update this with your service name

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-1

functions:
  hello:
    handler: handler.hello

resources:
  Resources:
    CoreProfileDynamoDBTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: hash_key
            AttributeType: S
          -
            AttributeName: range_key
            AttributeType: S 
          -
            AttributeName: gsi1_hash_key
            AttributeType: S
          -
            AttributeName: gsi1_range_key
            AttributeType: S
          -
            AttributeName: gsi2_hash_key
            AttributeType: S
          -
            AttributeName: gsi2_range_key
            AttributeType: S
        KeySchema:
          -
            AttributeName: hash_key
            KeyType: HASH
          -
            AttributeName: range_key
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        TableName: ${self:custom.tableName}
        GlobalSecondaryIndexes:
        - IndexName: ${self:custom.tableName}-gsi1
          KeySchema:
          - AttributeName: gsi1_hash_key
            KeyType: HASH
          - AttributeName: gsi1_range_key
            KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: ${self:custom.tableName}-gsi2
          KeySchema:
          - AttributeName: gsi2_hash_key
            KeyType: HASH
          - AttributeName: gsi2_range_key
            KeyType: RANGE
          Projection:
            ProjectionType: ALL

custom:
  tableName: ${self:service}-${self:custom.stage}-data
  stage: ${self:provider.stage}
  appSync:
    name: graphql-api
    authenticationType: API_KEY
    schema: schema.graphql
    dataSources:
      - type: AMAZON_DYNAMODB
        name: ${self:service}-${self:custom.stage}-data
        description: "DynamoDB POC Table"
        config:
          tableName: { Ref: CoreProfileDynamoDBTable }
        iamRoleStatements:
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:DeleteItem
            - dynamodb:PutItem
            - dynamodb:Scan
            - dynamodb:Query
            - dynamodb:UpdateItem
            - dynamodb:BatchWriteItem
            - dynamodb:BatchGetItem
            - dynamodb:DescribeTable
            - dynamodb:DescribeStream
            - dynamodb:GetRecords
            - dynamodb:GetShardIterator
            - dynamodb:ListStreams
          Resource:
            - "Fn::GetAtt": [ CoreProfileDynamoDBTable, Arn ]
            - Fn::Join:
              - "/"
              -
                - { "Fn::GetAtt": ["CoreProfileDynamoDBTable", "Arn" ] }
                - "index/*"
    mappingTemplates:
      - dataSource: graphql-api
        type: Query
        field: listContacts
        request: "listContacts-request.vtl"
        response: "listContacts-response.vtl"